{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","before","node","node2","parentNode","insertBefore","after","nextSibling","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    create(string) {\r\n        const container = document.createElement('template');\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild;\r\n    },\r\n    //用于创建节点\r\n    before(node, node2) {\r\n        node.parentNode.insertBefore(node2, node);\r\n        //insertBefore语句是将第一个参数插到第二个参数之前\r\n    },\r\n    //将node2插入node的前面\r\n    after(node, node2) {\r\n        node.parentNode.insertBefore(node2, node.nextSibling);\r\n    },\r\n    //将node2插入node的后面，即是将node2插入node下一个节点的前面\r\n    append(parent, node) {\r\n        parent.appendChild(node);\r\n    },\r\n    //将子节点放入父节点，用于新增儿子\r\n    wrap(node, parent) {\r\n        dom.before(node, parent);\r\n        //将父节点放到node节点的前面，成为兄弟关系\r\n        dom.append(parent, node);\r\n        //再将node作为子节点放入父节点,之前的兄弟关系被移除\r\n    },\r\n    //用于给node节点新增父亲\r\n\r\n    remove(node) {\r\n        //node.remove()太新了，ie不支持\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n        //返回移除的node，方便获取\r\n    },\r\n    //用于删除节点\r\n    empty(node) {\r\n        /*用循环删除后获得引用，如果不需要引用直接用，\r\n       node.innerHTML = ''可以代替下方所有语句 \r\n       */\r\n        /*\r\n         const childNodes = node.childNodes\r\n         等价于\r\n         const {childNodes} = node\r\n         */\r\n        const array = []\r\n        let x = node.firstChild\r\n        //让x等于node的第一个孩子(包含文本节点)\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            //删除第一个孩子并将其放入数组\r\n            x = node.firstChild\r\n            /*node.childNodes的长度是实时变化的，所以x等于\r\n            他新的第一个孩子*/\r\n        }\r\n        return array\r\n    },\r\n    //用于删除所有后代，不包括自己\r\n\r\n    attr(node, name, value) { // 重载\r\n        if (arguments.length === 3) {\r\n            //如果参数个数等于三，设置属性\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            //如果参数个数等于二，读取属性\r\n            return node.getAttribute(name)\r\n            //注意读取属性需要返回值\r\n        }\r\n    },\r\n    //用于设置或者读取属性\r\n    text(node, string) { // 适配\r\n        if (arguments.length === 2) {\r\n            if ('innerText' in node) {\r\n                //IE浏览器\r\n                node.innerText = string\r\n            } else {\r\n                //其他浏览器\r\n                node.textContent = string\r\n            }\r\n        } else if (arguments.length === 1) {\r\n            if ('innerText' in node) {\r\n                return node.innerText\r\n            } else {\r\n                return node.textContent\r\n            }\r\n        }\r\n    },\r\n    //用于写入或者读取文本内容，不同浏览器用适配解决\r\n    html(node, string) {\r\n        if (arguments.length === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments.length === 1) {\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    //用于读写Html内容\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div, 'color', 'red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div, 'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                //如果name是Object实例\r\n                // dom.style(div, {color: 'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //用于修改style\r\n    /*\r\n    name是变量，node.style[key]= node.style.color\r\n    所以node.style[key] = object[key]\r\n    等价于\r\n    node.style.border= object.border\r\n     */\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        //用于添加class\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        //用于删除class\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n        //用于判断有无class\r\n    },\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //用于添加事件监听\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //用于删除事件监听\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n        //scope为指定的范围，如果有scope，就在scope里面调用querySelectorAll，\r\n        //如果没有指定scope，则就在document之中调用querySelectorAll\r\n    },\r\n    //用于获取标签或标签们\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //用于获取父元素\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    //用于获取子元素\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n        //先获取这个节点的父节点的所有儿子的伪数组，将其转换为数组。\r\n        //然后过滤，只要不等于这个节点就将其放入数组中\r\n    },\r\n    //用于获取兄弟姐妹元素\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        /*如果下一个节点存在并且节点的类型为文本，继续循环，\r\n        直到为空或者下一个节点为元素，返回x\r\n         */\r\n        return x\r\n    },\r\n    //用于获取弟弟\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        /*如果上一个节点存在并且节点的类型为文本，继续循环，\r\n        直到为空或者上一个节点为元素，返回x\r\n        */\r\n        return x\r\n    },\r\n    //用于获取哥哥\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    //用于遍历所有节点\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        //获得node父节点的所有子节点\r\n        let i\r\n        //声明在for外面，在里面的话 return i 会没有被声明\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break\r\n            }\r\n        }\r\n        return i\r\n    }\r\n    //用于获取排行老几\r\n};\r\n\r\n"]}